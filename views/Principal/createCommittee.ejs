<%- include('nav') %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Active Employees</title>
    <style>
        body {
            background: linear-gradient(120deg, #3a7bd5 0%, #3a6073 100%);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            width: 90%;
            margin: 20px auto;
            padding: 25px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        th, td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
            color: #fff;
        }

        th {
            background-color: rgba(240, 208, 208, 0.8);
            color: #fff;
            cursor: pointer;
            position: relative; /* Required for sorting indicator */
        }

        th.sorted-asc::after {
            content: " ▲";
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        th.sorted-desc::after {
            content: " ▼";
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        input[type="text"] {
            padding: 8px;
            margin-bottom: 10px;
            width: 100%;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .control-group {
            display: inline-block;
            margin-right: 20px;
        }

        label {
            color: white;
        }

        .checkbox {
            margin-top: 10px;
        }

        button {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #218838;
        }

        .checkbox input[type="checkbox"] {
            cursor: pointer;
        }

        .checkbox input[type="checkbox"]:disabled {
            cursor: not-allowed;
        }
        /* Loading Spinner Styles */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.spinner {
    border: 16px solid #f3f3f3; /* Light grey */
    border-top: 16px solid #3498db; /* Blue */
    border-radius: 50%;
    width: 120px;
    height: 120px;
    animation: spin 2s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

    </style>
</head>
<body>
    
    <div class="container">
        <!-- Loading Spinner -->
<div id="loading" class="loading-overlay" style="display: none;">
    <div class="spinner"></div>
    <p>Loading...</p>
</div>

        <h2>Active Employees</h2>

        <!-- Single Search Field -->
        <div class="control-group">
            <label for="search-all">Search</label>
            <input type="text" id="search-all" placeholder="Search by Name, Employee ID, or Department" oninput="filterAndSort()">
        </div>

        <!-- Committee Selection -->
        <div class="controls">
            <div class="control-group">
                <label for="num-committee">Number of Committee Members</label>
                <input type="number" id="num-committee" min="1" max="10" placeholder="Enter number of members" oninput="updateCheckboxes()">
            </div>
            <div class="control-group">
                <label for="tenure">Tenure (in years)</label>
                <input type="number" id="tenure" min="1" max="10" placeholder="Enter tenure">
            </div>
        </div>

        <!-- Employee Table -->
        <table id="employee-table">
            <thead>
                <tr>
                    <th onclick="setSort(0)">Employee ID</th>
                    <th onclick="setSort(1)">Name</th>
                    <th onclick="setSort(2)">Department</th>
                    <th onclick="setSort(3)">Email</th>
                    <th onclick="setSort(4)">Start Date</th>
                    <th style="width: 100px;">Select Committee Member</th>
                </tr>
            </thead>
            <tbody id="employee-body">
                <% employees.forEach(employee => { %>
                    <tr>
                        <td><%= employee.emp_id %></td>
                        <td><%= employee.first_name %> <%= employee.last_name %></td>
                        <td><%= employee.department_name %></td>
                        <td><%= employee.email_id %></td>
                        <td>
                            <% 
                            let date = new Date(employee.start_date);
                            let formattedDate = date.toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' });
                            %>
                            <%= formattedDate %>
                        </td>
                        <td class="checkbox">
                            <input type="checkbox" name="committee-members" value="<%= employee.user_id %>" onchange="updateCheckboxes()">
                        </td>
                    </tr>
                <% }) %>
            </tbody>
        </table>

        <!-- Submit Button -->
        <button id="submit-committee">Submit Committee Members</button>
    </div>

    <script>
        let sortColumn = -1;  // Keep track of the current sort column
        let sortDirection = 1;  // 1 for ascending, -1 for descending

        // Filter and sort the table whenever the search input changes
        function filterAndSort() {
            const searchValue = document.getElementById('search-all').value.toLowerCase();
            const rows = Array.from(document.querySelectorAll('#employee-body tr'));

            rows.forEach(row => {
                const [id, name, dept] = row.cells;

                // Check if the row matches the search query
                const matches = id.textContent.toLowerCase().includes(searchValue) ||
                                name.textContent.toLowerCase().includes(searchValue) ||
                                dept.textContent.toLowerCase().includes(searchValue);

                row.style.display = matches ? '' : 'none';
            });

            // Apply sorting after filtering
            if (sortColumn >= 0) {
                sortTable(sortColumn);
            }
        }

        // Set the column to sort by
        function setSort(columnIndex) {
            if (sortColumn === columnIndex) {
                sortDirection *= -1;  // Toggle the direction if the same column is clicked
            } else {
                sortColumn = columnIndex;
                sortDirection = 1;  // Reset to ascending order for new column
            }
            sortTable(columnIndex);
        }

        // Sort the table by the selected column
        function sortTable(columnIndex) {
            const table = document.getElementById('employee-table');
            const rows = Array.from(document.querySelectorAll('#employee-body tr')).filter(row => row.style.display !== 'none');
            const isNumeric = !isNaN(rows[0].cells[columnIndex].textContent.trim());

            rows.sort((a, b) => {
                const aText = a.cells[columnIndex].textContent.trim();
                const bText = b.cells[columnIndex].textContent.trim();

                if (isNumeric) {
                    return sortDirection * (parseFloat(aText) - parseFloat(bText));
                } else {
                    return sortDirection * aText.localeCompare(bText);
                }
            });

            rows.forEach(row => table.tBodies[0].appendChild(row));  // Re-append rows in sorted order

            updateTableHeaders(columnIndex);
        }

        // Update table header styles to show sorting state
        function updateTableHeaders(columnIndex) {
            const headers = document.querySelectorAll('th');
            headers.forEach(header => header.classList.remove('sorted-asc', 'sorted-desc'));

            if (sortColumn >= 0) {
                headers[sortColumn].classList.add(sortDirection === 1 ? 'sorted-asc' : 'sorted-desc');
            }
        }

        // Update checkbox states based on the number of committee members
        function updateCheckboxes() {
            const numMembers = parseInt(document.getElementById('num-committee').value);
            const checkboxes = document.querySelectorAll('input[name="committee-members"]');
            const checkedCount = document.querySelectorAll('input[name="committee-members"]:checked').length;

            checkboxes.forEach(checkbox => {
                checkbox.disabled = checkedCount >= numMembers && !checkbox.checked;
            });
        }

        // Submit committee members
        document.getElementById('submit-committee').addEventListener('click', function() {
    const selectedMembers = Array.from(document.querySelectorAll('input[name="committee-members"]:checked'))
        .map(checkbox => checkbox.value);
    const numMembers = document.getElementById('num-committee').value;
    const tenure = document.getElementById('tenure').value;

    if (selectedMembers.length !== parseInt(numMembers)) {
        alert('Please select the correct number of committee members.');
        return;
    }

    // Show loading spinner
    document.getElementById('loading').style.display = 'flex';

    // Handle form submission (send data to backend)
    fetch('/principal/submit-committee', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            committeeMembers: selectedMembers,
            tenure: tenure,
        })
    }).then(response => response.json())
      .then(data => {
          // Hide loading spinner
          document.getElementById('loading').style.display = 'none';

          if (data.success) {
              alert('Committee members submitted successfully!');
              window.location.reload(); // Reload the page after success
          } else {
              alert('Failed to submit committee members.');
          }
      }).catch(error => {
          // Hide loading spinner in case of error
          document.getElementById('loading').style.display = 'none';
          alert('An error occurred. Please try again.');
      });
});

    </script>
</body>
</html>
